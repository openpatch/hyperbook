{
  "version": 3,
  "sources": ["../src/project.ts", "../src/index.ts"],
  "sourcesContent": ["import {\n  HyperbookJson,\n  HyperlibraryJson,\n  Language,\n  LanguageString,\n  Link,\n} from \"@hyperbook/types\";\nimport fs from \"fs/promises\";\nimport chalk from \"chalk\";\nimport path from \"path\";\n\nexport type Book = {\n  type: \"book\";\n  src: string;\n  basePath?: string;\n  href: string;\n  icon?: string;\n  name: string | LanguageString;\n  template?: string;\n};\n\nexport type Library = {\n  type: \"library\";\n  name: string | LanguageString;\n  basePath?: string;\n  icon?: string;\n  src: string;\n  projects: Project[];\n};\n\nexport type Project = Book | Library;\n\nexport function getProjectName(project: Project, language?: Language) {\n  let label = \"\";\n  if (typeof project.name === \"string\") {\n    label = project.name;\n  } else {\n    if (language) {\n      label = project.name[language];\n    } else {\n      label = Object.values(project.name)[0];\n    }\n    if (!label) {\n      console.log(\n        chalk.red(\n          `You need to provide a name for language ${language} in ${project.src}`\n        )\n      );\n      throw Error(\"\");\n    }\n  }\n  return label;\n}\n\nexport function makeLink(project: Project): Link {\n  if (project.type === \"library\") {\n    return {\n      label: getProjectName(project),\n      links: project.projects.map(makeLink),\n      icon: project.icon,\n    };\n  } else {\n    return {\n      label: getProjectName(project),\n      href: project.href,\n      icon: project.icon,\n    };\n  }\n}\n\nexport async function collect(\n  root: string,\n  basePath?: string,\n  label?: string | LanguageString,\n  icon?: string\n): Promise<Project> {\n  const hyperbookJson = await fs\n    .readFile(path.join(root, \"hyperbook.json\"))\n    .then((data) => JSON.parse(data.toString()) as HyperbookJson)\n    .catch((e) => {\n      if (e instanceof SyntaxError) {\n        console.error(e);\n      }\n      return null;\n    });\n\n  if (hyperbookJson) {\n    let href = basePath ?? hyperbookJson.basePath ?? \"/\";\n    if (!href.startsWith(\"/\")) {\n      href = \"/\" + href;\n    }\n\n    if (href.length > 1 && href.endsWith(\"/\")) {\n      href = href.slice(0, -1);\n    }\n    return {\n      type: \"book\",\n      src: root,\n      href,\n      basePath: basePath ?? hyperbookJson.basePath,\n      template: hyperbookJson.template,\n      name: label ?? hyperbookJson.name,\n      icon,\n    };\n  }\n\n  const hyperlibraryJson = await fs\n    .readFile(path.join(root, \"hyperlibrary.json\"))\n    .then((data) => JSON.parse(data.toString()) as HyperlibraryJson)\n    .catch((e) => {\n      if (e instanceof SyntaxError) {\n        console.error(e);\n      }\n      return null;\n    });\n\n  if (hyperlibraryJson) {\n    const projects = await Promise.all(\n      hyperlibraryJson.library.map(\n        async ({ src, basePath: localBasePath, name, icon }) => {\n          if (!localBasePath) {\n            console.log(\n              chalk.red(\n                `Missing basePath for book ${name} in library ${path.join(\n                  root,\n                  \"hyperlibrary.json\"\n                )}`\n              )\n            );\n          }\n          return collect(\n            path.join(root, src),\n            path.join(\n              basePath ?? hyperlibraryJson.basePath ?? \"\",\n              localBasePath\n            ),\n            name,\n            icon\n          );\n        }\n      )\n    );\n\n    return {\n      type: \"library\",\n      name: label ?? hyperlibraryJson.name,\n      basePath: basePath ?? hyperlibraryJson.basePath,\n      src: root,\n      icon,\n      projects,\n    };\n  }\n\n  console.log(\n    `${chalk.red(\"Error\")} - Missing book or library for path ${root}.`\n  );\n\n  throw Error(`Missing book or library for path ${root}`);\n}\n", "#!/usr/bin/env node\nimport chokidar from \"chokidar\";\nimport chalk from \"chalk\";\nimport express, { Express } from \"express\";\nimport next from \"next\";\nimport path from \"path\";\nimport { parse } from \"url\";\nimport { collect, Project } from \"./project\";\n\nconst createNextApp = async (root: string, basePath?: string) => {\n  const app = next({\n    dev: true,\n    dir: root,\n    conf: {\n      basePath,\n      env: {\n        root,\n      },\n    },\n  });\n\n  return app.prepare().then(() => {\n    // if directories are provided, watch them for changes and trigger reload\n    chokidar\n      .watch([\"./book\", \"./glossary\", \"./hyperbook.json\", \"./public\"], {\n        usePolling: false,\n        cwd: root,\n      })\n      .on(\"change\", async (filePath) => {\n        // @ts-ignore\n        app.server.hotReloader.send(\"building\");\n\n        const global =\n          filePath.startsWith(\"hyperbook.json\") ||\n          filePath.startsWith(\"public\");\n\n        const pages = [];\n        if (filePath.startsWith(\"book\") || global) {\n          pages.push(\"/[[...page]]\");\n        } else if (filePath.startsWith(\"glossary\") || global) {\n          pages.push(\"/glossary/[...term]\", \"/glossary\");\n        }\n\n        // @ts-ignore\n        // https://github.com/hashicorp/next-remote-watch/issues/42\n        app.server.hotReloader.send({\n          event: \"serverOnlyChanges\",\n          pages,\n        });\n      });\n    return app;\n  });\n};\n\nconst handleProject = (server: Express) => async (project: Project) => {\n  if (project.type === \"book\") {\n    const root = path.join(project.src, \".hyperbook\");\n    let basePath = project.basePath;\n\n    if (basePath && !basePath.startsWith(\"/\")) {\n      basePath = \"/\" + basePath;\n    }\n\n    if (basePath && basePath.endsWith(\"/\")) {\n      basePath = basePath.slice(0, -1);\n    }\n\n    const app = await createNextApp(root, basePath);\n    const handle = app.getRequestHandler();\n    // handle all other routes with next.js\n    const paths = [project.href, path.join(project.href, \"*\")];\n    server.all(paths, (req, res) => {\n      handle(req, res, parse(req.url, true));\n    });\n  } else if (project.type === \"library\") {\n    await Promise.all(project.projects.map(handleProject(server)));\n  }\n};\n\nasync function run() {\n  const root = path.join(process.cwd(), \"..\");\n  const project = await collect(root);\n  if (project.type === \"library\") {\n    console.log(\n      chalk.red(\n        `\\`hyperbook dev\\` is currently not supported for libraries. You have to run \\`hyperbook dev\\` in a folder containing a book.`\n      )\n    );\n    return;\n  }\n  // create an express server\n  const server = express();\n  await handleProject(server)(project);\n\n  process.chdir(root);\n\n  // fire it up\n  const port = process.env.PORT || 3000;\n  server.listen(port, () => {\n    console.log(`> Ready on http://localhost:${port}`);\n  });\n}\n\nrun();\n"],
  "mappings": "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",
  "names": ["icon", "_a", "chalk", "path"]
}
