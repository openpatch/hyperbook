{
  "version": 3,
  "sources": ["../src/index.ts", "../src/project.ts"],
  "sourcesContent": ["#!/usr/bin/env node\r\nimport chokidar from \"chokidar\";\r\nimport chalk from \"chalk\";\r\nimport express from \"express\";\r\nimport * as core from \"express-serve-static-core\";\r\nimport next from \"next\";\r\nimport path from \"path\";\r\nimport { parse } from \"url\";\r\nimport { collect, Project } from \"./project\";\r\n\r\nconst createNextApp = async (root: string, basePath?: string) => {\r\n  const app = next({\r\n    dev: true,\r\n    dir: root,\r\n    hostname: \"localhost\",\r\n    port: Number(process.env.PORT) || 3000,\r\n    conf: {\r\n      basePath,\r\n      env: {\r\n        root,\r\n      },\r\n    },\r\n  });\r\n\r\n  return app.prepare().then(async () => {\r\n    // if directories are provided, watch them for changes and trigger reload\r\n    const appServer: any =\r\n      (app as any).server || (await (app as any).getServer());\r\n    chokidar\r\n      .watch([\"./book\", \"./glossary\", \"./hyperbook.json\", \"./public\"], {\r\n        usePolling: false,\r\n        cwd: root,\r\n      })\r\n      .on(\"add\", async (filePath) => {\r\n        appServer.hotReloader.send(\"building\");\r\n\r\n        const global =\r\n          filePath.startsWith(\"hyperbook.json\") ||\r\n          filePath.startsWith(\"public\");\r\n\r\n        const pages = [];\r\n        if (filePath.startsWith(\"book\") || global) {\r\n          pages.push(\"/[[...page]]\");\r\n        } else if (filePath.startsWith(\"glossary\") || global) {\r\n          pages.push(\"/glossary/[...term]\", \"/glossary\");\r\n        }\r\n\r\n        // @ts-ignore\r\n        // https://github.com/hashicorp/next-remote-watch/issues/42\r\n        appServer.hotReloader.send({\r\n          event: \"serverOnlyChanges\",\r\n          pages,\r\n        });\r\n      })\r\n      .on(\"unlink\", async (filePath) => {\r\n        appServer.hotReloader.send(\"building\");\r\n\r\n        const global =\r\n          filePath.startsWith(\"hyperbook.json\") ||\r\n          filePath.startsWith(\"public\");\r\n\r\n        const pages = [];\r\n        if (filePath.startsWith(\"book\") || global) {\r\n          pages.push(\"/[[...page]]\");\r\n        } else if (filePath.startsWith(\"glossary\") || global) {\r\n          pages.push(\"/glossary/[...term]\", \"/glossary\");\r\n        }\r\n\r\n        // @ts-ignore\r\n        // https://github.com/hashicorp/next-remote-watch/issues/42\r\n        appServer.hotReloader.send({\r\n          event: \"serverOnlyChanges\",\r\n          pages,\r\n        });\r\n      })\r\n      .on(\"change\", async (filePath) => {\r\n        appServer.hotReloader.send(\"building\");\r\n\r\n        const global =\r\n          filePath.startsWith(\"hyperbook.json\") ||\r\n          filePath.startsWith(\"public\");\r\n\r\n        const pages = [];\r\n        if (filePath.startsWith(\"book\") || global) {\r\n          pages.push(\"/[[...page]]\");\r\n        } else if (filePath.startsWith(\"glossary\") || global) {\r\n          pages.push(\"/glossary/[...term]\", \"/glossary\");\r\n        }\r\n\r\n        // @ts-ignore\r\n        // https://github.com/hashicorp/next-remote-watch/issues/42\r\n        appServer.hotReloader.send({\r\n          event: \"serverOnlyChanges\",\r\n          pages,\r\n        });\r\n      });\r\n    return app;\r\n  });\r\n};\r\n\r\nconst handleProject = (server: core.Express) => async (project: Project) => {\r\n  if (project.type === \"book\") {\r\n    const root = path.join(project.src, \".hyperbook\");\r\n    let basePath = project.basePath;\r\n\r\n    if (basePath && !basePath.startsWith(\"/\")) {\r\n      basePath = \"/\" + basePath;\r\n    }\r\n\r\n    if (basePath && basePath.endsWith(\"/\")) {\r\n      basePath = basePath.slice(0, -1);\r\n    }\r\n\r\n    const app = await createNextApp(root, basePath);\r\n    const handle = app.getRequestHandler();\r\n    // handle all other routes with next.js\r\n    const paths = [\r\n      project.href,\r\n      project.href.endsWith(\"/\") ? project.href + \"*\" : project.href + \"/*\",\r\n    ];\r\n    server.all(paths, (req, res) => {\r\n      handle(req as any, res, parse(req.url, true));\r\n    });\r\n  } else if (project.type === \"library\") {\r\n    await Promise.all(project.projects.map(handleProject(server)));\r\n  }\r\n};\r\n\r\nasync function run() {\r\n  console.log(`> Starting dev server ...`);\r\n  const root = path.join(process.cwd(), \"..\");\r\n  const project = await collect(root);\r\n  //if (project.type !== \"library\") {\r\n  //  console.log(\r\n  //    chalk.red(\r\n  //      `\\`hyperbook dev\\` is currently not supported for libraries. You have to run \\`hyperbook dev\\` in a folder containing a book.`\r\n  //    )\r\n  //  );\r\n  //  return;\r\n  //}\r\n  // create an express server\r\n  const server = express();\r\n  await handleProject(server)(project);\r\n\r\n  process.chdir(root);\r\n\r\n  // fire it up\r\n  const port = process.env.PORT || 3000;\r\n  server.listen(port, () => {\r\n    console.log(`> Ready on http://localhost:${port}`);\r\n  });\r\n}\r\n\r\nrun();\r\n", "import {\r\n  HyperbookJson,\r\n  HyperlibraryJson,\r\n  Language,\r\n  LanguageString,\r\n  Link,\r\n} from \"@hyperbook/types\";\r\nimport fs from \"fs/promises\";\r\nimport chalk from \"chalk\";\r\nimport path from \"path\";\r\n\r\nexport type Book = {\r\n  type: \"book\";\r\n  src: string;\r\n  basePath?: string;\r\n  href: string;\r\n  icon?: string;\r\n  name: string | LanguageString;\r\n  template?: string;\r\n};\r\n\r\nexport type Library = {\r\n  type: \"library\";\r\n  name: string | LanguageString;\r\n  basePath?: string;\r\n  icon?: string;\r\n  src: string;\r\n  projects: Project[];\r\n};\r\n\r\nexport type Project = Book | Library;\r\n\r\nexport function getProjectName(project: Project, language?: Language) {\r\n  let label = \"\";\r\n  if (typeof project.name === \"string\") {\r\n    label = project.name;\r\n  } else {\r\n    if (language) {\r\n      label = project.name[language] || \"en\";\r\n    } else {\r\n      label = Object.values(project.name)[0];\r\n    }\r\n    if (!label) {\r\n      console.log(\r\n        chalk.red(\r\n          `You need to provide a name for language ${language} in ${project.src}`\r\n        )\r\n      );\r\n      throw Error(\"\");\r\n    }\r\n  }\r\n  return label;\r\n}\r\n\r\nexport function makeLink(project: Project): Link {\r\n  if (project.type === \"library\") {\r\n    return {\r\n      label: getProjectName(project),\r\n      links: project.projects.map(makeLink),\r\n      icon: project.icon,\r\n    };\r\n  } else {\r\n    return {\r\n      label: getProjectName(project),\r\n      href: project.href,\r\n      icon: project.icon,\r\n    };\r\n  }\r\n}\r\n\r\nexport async function collect(\r\n  root: string,\r\n  basePath?: string,\r\n  label?: string | LanguageString,\r\n  icon?: string\r\n): Promise<Project> {\r\n  const hyperbookJson = await fs\r\n    .readFile(path.join(root, \"hyperbook.json\"))\r\n    .then((data) => JSON.parse(data.toString()) as HyperbookJson)\r\n    .catch((e) => {\r\n      if (e instanceof SyntaxError) {\r\n        console.error(e);\r\n      }\r\n      return null;\r\n    });\r\n\r\n  if (hyperbookJson) {\r\n    let href = basePath ?? hyperbookJson.basePath ?? \"/\";\r\n    if (!href.startsWith(\"/\")) {\r\n      href = \"/\" + href;\r\n    }\r\n\r\n    if (href.length > 1 && href.endsWith(\"/\")) {\r\n      href = href.slice(0, -1);\r\n    }\r\n    return {\r\n      type: \"book\",\r\n      src: root,\r\n      href,\r\n      basePath: basePath ?? hyperbookJson.basePath,\r\n      template: hyperbookJson.template,\r\n      name: label ?? hyperbookJson.name,\r\n      icon,\r\n    };\r\n  }\r\n\r\n  const hyperlibraryJson = await fs\r\n    .readFile(path.join(root, \"hyperlibrary.json\"))\r\n    .then((data) => JSON.parse(data.toString()) as HyperlibraryJson)\r\n    .catch((e) => {\r\n      if (e instanceof SyntaxError) {\r\n        console.error(e);\r\n      }\r\n      return null;\r\n    });\r\n\r\n  if (hyperlibraryJson) {\r\n    const projects = await Promise.all(\r\n      hyperlibraryJson.library.map(\r\n        async ({ src, basePath: localBasePath, name, icon }) => {\r\n          if (!localBasePath) {\r\n            console.log(\r\n              chalk.red(\r\n                `Missing basePath for book ${name} in library ${path.join(\r\n                  root,\r\n                  \"hyperlibrary.json\"\r\n                )}`\r\n              )\r\n            );\r\n          }\r\n          return collect(\r\n            path.join(root, src),\r\n            path.join(\r\n              basePath ?? hyperlibraryJson.basePath ?? \"\",\r\n              localBasePath\r\n            ),\r\n            name,\r\n            icon\r\n          );\r\n        }\r\n      )\r\n    );\r\n\r\n    return {\r\n      type: \"library\",\r\n      name: label ?? hyperlibraryJson.name,\r\n      basePath: basePath ?? hyperlibraryJson.basePath,\r\n      src: root,\r\n      icon,\r\n      projects,\r\n    };\r\n  }\r\n\r\n  console.log(\r\n    `${chalk.red(\"Error\")} - Missing book or library for path ${root}.`\r\n  );\r\n\r\n  throw Error(`Missing book or library for path ${root}`);\r\n}\r\n"],
  "mappings": "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",
  "names": ["path", "icon", "path"]
}
